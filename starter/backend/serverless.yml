# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: brian9030

# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: todo-app
service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs20.x
  tracing:
    lambda: true
    apiGateway: true
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: serverless
  environment:
    TODOS_TABLE: todo-app-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: images-brian9030-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    PROJECT_NAME: "todo-app"
    INDEX_NAME: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
    AUTH0_CERTIFICATE: '-----BEGIN CERTIFICATE-----
MIIDHTCCAgWgAwIBAgIJNx/z/jDNQP8cMA0GCSqGSIb3DQEBCwUAMCwxKjAoBgNV
BAMTIWRldi1xZ3JqY2pjMXNpZzNrNDM3LnVzLmF1dGgwLmNvbTAeFw0yNDEyMDMx
ODU4MDZaFw0zODA4MTIxODU4MDZaMCwxKjAoBgNVBAMTIWRldi1xZ3JqY2pjMXNp
ZzNrNDM3LnVzLmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
ggEBAMzzbAR/E8GiqStPQnGb5NRMC7LKWihVlhwGpx0ZEb/R1D9n2ScLIK6ok7Kk
CH1ku6WMmNNdbPklL5hyuIT3fv3p4CicC7MiSyWn2MS2Gd/hqjtrTjI537mW+YFH
/5BiRJj3/47lLU7eoDDZ88iEHNZSUIUWaH2elAGjwhcq3IAXRVNiMfKTyy2Us6LT
89dg1mm0UWw4lTDA8Y4evoDKf/acy+YiMo/7FNJmuaRN97vUMXB8qSnxpU5sDKLz
laWV36Z81ohH+4SIZzTHJBUO8bXBj0Zjdb942bGu9N9deYSLNxo/zidIF8wcisFa
WUWG/Fow8zdg1QO2Va2Ri3OXI3ECAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAd
BgNVHQ4EFgQUmL4z5bx3p4VRabBJsLVU8lYcSR4wDgYDVR0PAQH/BAQDAgKEMA0G
CSqGSIb3DQEBCwUAA4IBAQATUiX783ddT/RHNV6MdZXfgQpQsxdef0UbbM/T6ZqN
eg707+d/r3gEnVy1QxGbYwISXwC0uD1Nx6QRuzhaQEsEUvKbTYUBiJCjKutg4hwD
DEzX1usM0cYummfACYE3ZYUn8RBSrrKVRSROA55wZUJYszF5nFz2cNxk2F0Xz+4U
ds/nlRGCJPBps1pq878NpLpkX8GBKVR+LnZUA02uZYuRPanNr0+NVD8TmrMLqd6R
TMR9EvR6QmcpLinGxbOi+x88HB8ofgNHiwvtvIKoZeUXDfxiDRAZoHtUoJpMq9LM
UGTC4eio1pzVgepqkC7esyZdbEeNiCGhsVta+dUSQHoS
-----END CERTIFICATE-----'

  logs:
    restApi: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: todos
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/CreateTodoRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          authorizer: Auth
          method: patch
          path: todos/{todoId}
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/UpdateTodoRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 30000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket
